ALTER TABLE scores DROP CONSTRAINT fk_player;
ALTER TABLE scores ADD CONSTRAINT fk_player FOREIGN KEY (player_id) REFERENCES twitch_users(id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE twitch_users RENAME TO users;

ALTER TABLE users ALTER COLUMN login TYPE VARCHAR(40);

ALTER TABLE users RENAME COLUMN last_login TO last_login_at;
ALTER TABLE users ALTER COLUMN last_login_at SET DEFAULT NOW();

ALTER TABLE users RENAME COLUMN created_at TO created_at;
ALTER TABLE users ALTER COLUMN created_at SET DEFAULT NOW();

CREATE TYPE identity_provider AS ENUM ('google', 'twitch', 'github', 'discord', 'facebook');

CREATE TABLE user_identities (
    id BIGSERIAL PRIMARY KEY,

    provider identity_provider NOT NULL,
    provider_user_id VARCHAR ( 36 ) NOT NULL,

    user_id BIGINT,

	created_at timestamptz NOT NULL DEFAULT NOW(),
	updated_at timestamptz NOT NULL DEFAULT NOW(),
    last_login_at timestamptz NOT NULL DEFAULT NOW(),

    access_token varchar( 128 ),
    refresh_token varchar( 128 ),

	CONSTRAINT fk_user
		FOREIGN KEY(user_id)
			REFERENCES users(id)
            ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE UNIQUE INDEX IDX_user_identity on user_identities (provider, provider_user_id);

-- the loop below 
do
$$
declare
    new_user_id bigint := 1000;
    f record;
begin
    for f in select id, email, login, created_at, last_login_at, profile_image_url, display_name
           from users 
           where id > 10000
           order by created_at asc
    loop
        update users set id=new_user_id where id=f.id; -- doing this also updates ALL the scores!
        insert into user_identities
            (provider, provider_user_id, user_id, created_at, updated_at, last_login_at)
            values
            ('twitch', f.id, new_user_id, f.created_at, f.created_at, f.last_login_at);
        new_user_id := new_user_id + 1;
    end loop;
end;
$$;

-- Make the user table auto-increment
ALTER TABLE users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
SELECT setval(pg_get_serial_sequence('users', 'id'), coalesce(max(id), 0)+1 , false) from users;